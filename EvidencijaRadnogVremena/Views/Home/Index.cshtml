@model EvidencijaRadnogVremena.ViewModel.ManagerDashboardViewModel
@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}




<div class="row">
    <div class="col-lg-4">
        <a class="portfolio-item" href="../Markets/">
            <span class="caption">
                <span class="caption-content">
                    <p class="mb-0">Markets</p>
                </span>
            </span>
            <img class="img-fluid" src="Images/schedule.jpg" alt="">
        </a>
    </div>

    <div class="col-lg-4">
        <a class="portfolio-item" href="../Workers/">
            <span class="caption">
                <span class="caption-content">
                    <p class="mb-0">Workers</p>
                </span>
            </span>
            <img class="img-fluid" src="Images/schedule.jpg" alt="">
        </a>
    </div>

    <div class="col-lg-4">
        <a class="portfolio-item" href="../NedeljniPlans/">
            <span class="caption">
                <span class="caption-content">
                    <p class="mb-0">Schedules</p>
                </span>
            </span>
            <img class="img-fluid" src="Images/schedule.jpg" alt="">
        </a>
    </div>
</div>

@if (Model != null)
{
    <div>
        <table class="table">
            <tr>
                <th>
                    Status
                </th>
                <th>
                    Šifra
                    @*@Html.DisplayNameFor(model => model.SifraMarketa)*@
                </th>
                <th>
                    Ime i prezime
                </th>
                <th>
                    Uloga
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model.DashboardManager.RadniciView)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.TipRada)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Radnik.SifraRadnika)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Radnik.ImePrezime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Radnik.Uloga)
                    </td>
                    <td>
                        <button href="#" class="btn btn-primary btn-lg checkIn showDialog" @Model.Availability(item, "checkIn") data-id="@item.Radnik.RadnikId">Check in</button>
                    </td>
                    <td>
                        <button href="#" class="btn btn-primary btn-lg checkOut showDialog" @Model.Availability(item, "checkOut") data-id="@item.Radnik.RadnikId">Check out</button>
                    </td>
                    <td>
                        <button href="#" class="btn btn-primary btn-lg goToBreak showDialog" @Model.Availability(item, "goToBreak") data-id="@item.Radnik.RadnikId">Go to break</button>
                    </td>
                    <td>
                        <button href="#" class="btn btn-primary btn-lg backFromBreak showDialog" @Model.Availability(item, "backFromBreak") data-id="@item.Radnik.RadnikId">I am back</button>
                    </td>
                </tr>
            }
        </table>
    </div>
}


@*<div>
    <div class="jumbotron">
        <h2>Spisak radnika</h2>
        <p>Lista...</p>
    </div>
</div>*@

<div class="modal fade" role="dialog" id="modal">
    <div class="modal-dialog">
        <div class="modal-content jumbotron" autocomplete="off">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>
                <h4 class="modal-title">Please enter password to confirm</h4>
            </div>
            <div class="modal-body">
                <input type="password" id="myPassword" autocomplete="off" />
                <input type="button" id="btnAction" value="Action" />
                <div id="loadingDiv">
                    <img src="~/Images/loader.gif" sizes="50x20" />
                </div>
                <div id="response"></div>
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.3/jquery.min.js"></script>

<script type="text/javascript">



    $(function () {
        var _id = null;
        var _stringURL = "";
        var _network = "";

        var $loading = $('#loadingDiv').hide();
        $(document)
            .ajaxStart(function () {
                $loading.show();
            })
            .ajaxStop(function () {
                $loading.hide();
            });

        $(".showDialog").click(function () {
            var id = $(this).data('id');
            _id = id;
            if ($(this).hasClass("goToBreak")) {
                _stringURL = "./Home/GoToBrake";
                $("#btnAction").val("Going on break");
            }
            if ($(this).hasClass("backFromBreak")) {
                _stringURL = "./Home/BackFromBreak";
                $("#btnAction").val("I am back");
            }
            if ($(this).hasClass("checkIn")) {
                _stringURL = "./Home/CheckIn";
                $("#btnAction").val("Check in");
            }
            if ($(this).hasClass("checkOut")) {
                _stringURL = "./Home/CheckOut";
                $("#btnAction").val("Check out");
            }
            $("#modal").modal('show');
            $('#response').empty();
        });

        $("#btnAction").click(function () {
            $('#response').empty();
            var password = $("#myPassword").val();
            if (password != "" && _id != null) {
                //alert("Going to the server method " + _stringURL + " with password = " + password + ", ID = " + _id);

                var model = {
                    RadnikId: _id,
                    Password: password,
                    LocalMachine: _network
                };
                $.ajax({
                    type: "POST",
                    data: JSON.stringify(model),
                    url: _stringURL,
                    contentType: "application/json"
                }).done(function (res) {
                    debugger;
                    if (res.IsValid == true) {
                        $.get("Home/_GetPartialView", function (data) {
                            $('#response').html(data);
                        });
                        //if (res.Message != '') {
                        //    alert(res.Message);
                        //}
                        location.reload(true);
                    } else if (res.IsValid == false) {
                        $('#response').html(res.Message);
                    }
                });
            }
        });
    });

    $(function ip_local() {
        var ip = false;
        window.RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection || false;

        if (window.RTCPeerConnection) {
            ip = [];
            var pc = new RTCPeerConnection({ iceServers: [] }), noop = function () { };
            pc.createDataChannel('');
            pc.createOffer(pc.setLocalDescription.bind(pc), noop);

            pc.onicecandidate = function (event) {
                if (event && event.candidate && event.candidate.candidate) {
                    var s = event.candidate.candidate.split('\n');
                    ip.push(s[0].split(' ')[4]);
                }
            }
        }

        return ip;
    });
    $(function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
        //compatibility for firefox and chrome
        var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
        var pc = new myPeerConnection({
            iceServers: []
        }),
            noop = function () { },
            localIPs = {},
            ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
            key;

        function iterateIP(ip) {
            if (!localIPs[ip]) onNewIP(ip);
            localIPs[ip] = true;
        }

        //create a bogus data channel
        pc.createDataChannel("");

        // create offer and set local description
        pc.createOffer().then(function (sdp) {
            sdp.sdp.split('\n').forEach(function (line) {
                if (line.indexOf('candidate') < 0) return;
                line.match(ipRegex).forEach(iterateIP);
            });

            pc.setLocalDescription(sdp, noop, noop);
        }).catch(function (reason) {
            // An error occurred, so handle the failure to connect
        });

        //listen for candidate events
        pc.onicecandidate = function (ice) {
            if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
            ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
        };
    }
    );
</script>